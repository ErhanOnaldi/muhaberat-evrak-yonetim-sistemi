// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using muhaberat_evrak_yonetim.Models;

#nullable disable

namespace muhaberat_evrak_yonetim.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.CargoTrackingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NewStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CargoTrackingLogs");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasFullAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentCode")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CargoCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CargoTrackingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PackageType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhysicalDocumentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceivedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ReceiverDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int");

                    b.Property<int?>("SenderDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CargoTrackingNumber");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryStatus");

                    b.HasIndex("DocumentNumber")
                        .IsUnique();

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ReceiverDepartmentId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("SenderDepartmentId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("Status");

                    b.ToTable("Documents", t =>
                        {
                            t.HasCheckConstraint("CK_Document_DeliveryStatus", "[DeliveryStatus] IN ('PREPARING', 'SHIPPED', 'IN_TRANSIT', 'DELIVERED', 'RETURNED')");

                            t.HasCheckConstraint("CK_Document_PackageType", "[PackageType] IS NULL OR [PackageType] IN ('ENVELOPE', 'SMALL_PACKAGE', 'LARGE_PACKAGE', 'SPECIAL')");

                            t.HasCheckConstraint("CK_Document_PhysicalDocumentType", "[PhysicalDocumentType] IS NULL OR [PhysicalDocumentType] IN ('ORIGINAL', 'COPY', 'NOTARIZED')");

                            t.HasCheckConstraint("CK_Document_ReceiverCheck", "[ReceiverUserId] IS NOT NULL OR [ReceiverDepartmentId] IS NOT NULL");

                            t.HasCheckConstraint("CK_Document_Status", "[Status] IN ('DRAFT', 'SENT', 'DELIVERED', 'RECEIVED', 'CANCELLED')");
                        });
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.DocumentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentHistories");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.DocumentPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDownload")
                        .HasColumnType("bit");

                    b.Property<bool>("CanReview")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUpload")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("DocumentPermissions");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedDeliveryDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("PackageRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresSignature")
                        .HasColumnType("bit");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TypeCode")
                        .IsUnique();

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleCode")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UnitId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.CargoTrackingLog", b =>
                {
                    b.HasOne("muhaberat_evrak_yonetim.Entities.Document", "Document")
                        .WithMany("CargoTrackingLogs")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("muhaberat_evrak_yonetim.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Document");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Department", b =>
                {
                    b.HasOne("muhaberat_evrak_yonetim.Entities.Unit", "Unit")
                        .WithMany("Departments")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Document", b =>
                {
                    b.HasOne("muhaberat_evrak_yonetim.Entities.User", "CreatedByUser")
                        .WithMany("CreatedDocuments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("muhaberat_evrak_yonetim.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.Department", "ReceiverDepartment")
                        .WithMany("ReceivedDocuments")
                        .HasForeignKey("ReceiverDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.User", "ReceiverUser")
                        .WithMany("ReceivedDocuments")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.User", "ReviewedByUser")
                        .WithMany("ReviewedDocuments")
                        .HasForeignKey("ReviewedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.Department", "SenderDepartment")
                        .WithMany("SentDocuments")
                        .HasForeignKey("SenderDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.User", "SenderUser")
                        .WithMany("SentDocuments")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("DocumentType");

                    b.Navigation("ReceiverDepartment");

                    b.Navigation("ReceiverUser");

                    b.Navigation("ReviewedByUser");

                    b.Navigation("SenderDepartment");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.DocumentHistory", b =>
                {
                    b.HasOne("muhaberat_evrak_yonetim.Entities.Document", "Document")
                        .WithMany("DocumentHistories")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("muhaberat_evrak_yonetim.Entities.User", "User")
                        .WithMany("DocumentHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.DocumentPermission", b =>
                {
                    b.HasOne("muhaberat_evrak_yonetim.Entities.Department", "Department")
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.DocumentType", "DocumentType")
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.Role", "Role")
                        .WithMany("DocumentPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Department");

                    b.Navigation("DocumentType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.User", b =>
                {
                    b.HasOne("muhaberat_evrak_yonetim.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("muhaberat_evrak_yonetim.Entities.Unit", "Unit")
                        .WithMany("Users")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Department", b =>
                {
                    b.Navigation("DocumentPermissions");

                    b.Navigation("ReceivedDocuments");

                    b.Navigation("SentDocuments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Document", b =>
                {
                    b.Navigation("CargoTrackingLogs");

                    b.Navigation("DocumentHistories");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.DocumentType", b =>
                {
                    b.Navigation("DocumentPermissions");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Role", b =>
                {
                    b.Navigation("DocumentPermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.Unit", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("muhaberat_evrak_yonetim.Entities.User", b =>
                {
                    b.Navigation("CreatedDocuments");

                    b.Navigation("DocumentHistories");

                    b.Navigation("ReceivedDocuments");

                    b.Navigation("ReviewedDocuments");

                    b.Navigation("SentDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
